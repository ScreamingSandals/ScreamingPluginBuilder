plugins {
    id 'groovy'
    id 'java-library'
    id 'java-gradle-plugin'
    id 'maven-publish'
}

defaultTasks 'clean', 'build'

def ciCdOptimized = System.getenv("OPTIMIZE_FOR_CI_CD") == "1"

if (!ciCdOptimized) {
    defaultTasks.add('publishToMavenLocal')
}

if (System.getenv("GITLAB_REPO") != null || (System.getenv("NEXUS_URL_SNAPSHOT") != null && System.getenv("NEXUS_URL_RELEASE") != null)) {
    defaultTasks.add('publish')
}


repositories {
    maven { url "https://plugins.gradle.org/m2/" }
}

dependencies {
    compileOnly gradleApi()
    compileOnly localGroovy()

    //shadow
    api group: 'gradle.plugin.com.github.jengelman.gradle.plugins', name: 'shadow', version: SHADOW_PLUGIN

    //lombok
    api group: 'io.freefair.gradle', name: 'lombok-plugin', version: LOMBOK_PLUGIN

    api group: 'com.jcraft', name:  'jsch', version: JSCH_PLUGIN
    api group: 'com.google.code.gson', name: 'gson', version: GSON_PLUGIN
}

group = 'org.screamingsandals.gradle.builder'
version = PLUGIN_VERSION

gradlePlugin {
    plugins {
        screamingPlugin {
            id = 'org.screamingsandals.plugin-builder'
            implementationClass = 'org.screamingsandals.gradle.builder.ScreamingPlugin'
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            it.artifacts.every {
                it.classifier = ""
            }

            pom.withXml {
                if (asNode().get("dependencies") != null) {
                    asNode().get("dependencies").each {
                        it.parent().remove(it)
                    }
                }
            }
        }
    }

    if (System.getenv("GITLAB_REPO") != null) {
        repositories {
            maven {
                url System.getenv("GITLAB_REPO")
                name "GitLab"
                credentials(HttpHeaderCredentials) {
                    name = 'Private-Token'
                    value = System.getenv("GITLAB_TOKEN")
                }
                authentication {
                    header(HttpHeaderAuthentication)
                }
            }
        }
    }

    if (System.getenv("NEXUS_URL_SNAPSHOT") != null && System.getenv("NEXUS_URL_RELEASE") != null) {
        repositories {
            maven {
                if (((String) project.version).contains("SNAPSHOT")) {
                    it.url = System.getenv("NEXUS_URL_SNAPSHOT")
                } else {
                    it.url = System.getenv("NEXUS_URL_RELEASE")
                }
                it.credentials.username = System.getenv("NEXUS_USERNAME")
                it.credentials.password = System.getenv("NEXUS_PASSWORD")
            }
        }
    }
}

sourceCompatibility = 11
