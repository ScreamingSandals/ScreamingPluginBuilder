import com.github.jengelman.gradle.plugins.shadow.ShadowExtension

plugins {
    id 'groovy'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

defaultTasks 'clean', 'build'

def ciCdOptimized = System.getenv("OPTIMIZE_FOR_CI_CD") == "1"

if (!ciCdOptimized) {
    defaultTasks.add('publishToMavenLocal')
}

if (System.getenv("GITLAB_REPO") != null || (System.getenv("NEXUS_URL_SNAPSHOT") != null && System.getenv("NEXUS_URL_RELEASE") != null)) {
    defaultTasks.add('publish')
}


repositories {
    maven { url "https://plugins.gradle.org/m2/" }
}

dependencies {
    compileOnly gradleApi()
    compileOnly localGroovy()
    implementation 'com.github.johnrengelman.shadow:com.github.johnrengelman.shadow.gradle.plugin:' + SHADOW_PLUGIN
    implementation 'io.franzbecker:gradle-lombok:' + LOMBOK_PLUGIN
    implementation 'com.jcraft:jsch:' + JSCH_PLUGIN
    implementation 'com.google.code.gson:gson:' + GSON_PLUGIN
}

group = 'org.screamingsandals.gradle.builder'
version = PLUGIN_VERSION

publishing {
    publications {
        maven(MavenPublication) {
            ShadowExtension shadow = project.extensions.getByName("shadow")
            shadow.component(it)

            it.artifacts.every {
                it.classifier = ""
            }

            pom.withXml {
                if (asNode().get("dependencies") != null) {
                    asNode().get("dependencies").each {
                        it.parent().remove(it)
                    }
                }
            }
        }
    }

    if (System.getenv("GITLAB_REPO") != null) {
        repositories {
            maven {
                url System.getenv("GITLAB_REPO")
                name "GitLab"
                credentials(HttpHeaderCredentials) {
                    name = 'Private-Token'
                    value = System.getenv("GITLAB_TOKEN")
                }
                authentication {
                    header(HttpHeaderAuthentication)
                }
            }
        }
    }

    if (System.getenv("NEXUS_URL_SNAPSHOT") != null && System.getenv("NEXUS_URL_RELEASE") != null) {
        repositories {
            maven {
                if (((String) project.version).contains("SNAPSHOT")) {
                    it.url = System.getenv("NEXUS_URL_SNAPSHOT")
                } else {
                    it.url = System.getenv("NEXUS_URL_RELEASE")
                }
                it.credentials.username = System.getenv("NEXUS_USERNAME")
                it.credentials.password = System.getenv("NEXUS_PASSWORD")
            }
        }
    }
}

sourceCompatibility = 11
